# -*- coding: utf-8 -*-
"""OAC_demo.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ePf0puPEF9DIkGjJuiCOaOPYdVJF5Rac

# 기사Data에 라벨링
"""

#contents,label
import pandas as pd


label=[0]*1000
dic={'content':[],'label':[]}
j=0

for content in contents:
  content_data=content.text
  dic['content'].append(content_data)
  for i in range(len(posneg)):
    posflag=False
    negflag=False
    if i<len(positive)-1:
      if contents_data,find(posneg[i])!= -1:
        posflag=True
        break
      if i>len(positive)-2:
        if contents_data.find(posneg[i]) != -1:
          negflag=True
          break
  if posflag==True:
    label[j]=1
  elif negflag==True:
    label[j]=-1
  elif negflag==False and posflag==False:
    label[j]=0
  j=j+1
dic['label']=label
df=pd.DataFrame(dic)
#이 뒤 csv파일 저장

"""긍부정 시각화"""

# Commented out IPython magic to ensure Python compatibility.
#히스토그램
# %matplotlib inline
import matplotlib.pyplot as plt
train_data['label'].value_counts().plot(kind='bar')

test_data['label'].value_counts().plot(kind='bar')

print(train_data.groupby('label').size().reset_index(name='count')) 
print(test_data.groupby('label').size().reset_index(name='count'))

"""토큰화"""

#막,강

"""데이터 훈련"""

from keras.layers import Embedding,Dense,LSTM
from keras.models import Sequential
from keras.preprocessing.sequence import pad_sequences
max_len=2000

X_train=pad_sequences(X_train,maxlen=max_len)
X_test=pad_sequences(X_test,maxlen=max_len)

#model의 레이어,Hparameter,optimizer를 바꿔서 실험할 수 있음
#학습그래프그리기
model=Sequential()
model.add(Embedding(max_words,100))
model.add(LSTM(128))
model.add(Dense(3,activation='softmax'))

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
history=model.fit(X_train,Y_train,epochs=10,batch_size=10,validation_split=0.1) 
#전체데이터에서 10%만 validation_data로 활용
print('accuracy:{:.2f}'.format(model.evaluate(X_test,Y_test)[1]))

###
#예측된 값과 실제 값 비교
import numpy as np
predict=model.predict(X_test)
predict_labels=np.argmax(predict,axis=1)
original_labels=np.argmax(Y_test,axis=1)
for i in range(10):
  print(test_data['content'].iloc[i])
  print('원래:',original_labels[i],'예측:,'predict_labels[i])
